#код
import cv2
import numpy as np
import time


class ImageCapture:
    def __init__(self, source):
        self.cap = cv2.VideoCapture(source)

        if not self.cap.isOpened():
            print("Ошибка: Не удалось открыть источник.")
            exit()

        self.ret, self.prev_frame = self.cap.read()
        if not self.ret:
            print("Ошибка: Не удалось прочитать кадр.")
            exit()

        self.prev_gray = cv2.cvtColor(self.prev_frame, cv2.COLOR_BGR2GRAY)

    def get_frame(self):
        ret, frame = self.cap.read()
        if not ret:
            return None, None

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        return gray, frame

    def release(self):
        self.cap.release()
        cv2.destroyAllWindows()


class MotionDetector:
    def __init__(self, pixels_per_meter, fps, execution_frequency):
        self.pixels_per_meter = pixels_per_meter
        self.fps = fps
        self.execution_frequency = execution_frequency
        self.speed_history = []  # Хранение значений скорости
        self.speed_variance_threshold = 0.5  # Порог дисперсии для отсечения

    def calculate_speed(self, prev_gray, current_gray):
                # Вычисление разности между кадрами
        diff = cv2.absdiff(prev_gray, current_gray)

        # Применение порогового фильтра для получения бинарного изображения
        thresh = cv2.threshold(diff, 30, 255, cv2.THRESH_BINARY)[1]

        # Поиск контуров
        contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        speed = 0  # Скорость движения в метрах в секунду
        bounding_box = None  # Переменная для хранения координат объектов

        for contour in contours:
            if cv2.contourArea(contour) < 100:  # Игнорируем малые движения
                continue

            # Получаем координаты контура
            (x, y, w, h) = cv2.boundingRect(contour)
            bounding_box = (x, y, w, h)

            # Вычисляем скорость как (размер изменения в пикселях / пикселей на метр) * FPS
            speed = (cv2.contourArea(contour) ** 0.5 / self.pixels_per_meter) * self.fps

            # Сохраняем значение в истории скорости
            self.speed_history.append(speed)

            # Ограничиваем размер истории
            if len(self.speed_history) > 10:  # Используем последние 10 значений
                self.speed_history.pop(0)

            # Вычисление дисперсии
            if len(self.speed_history) >= 2:
                mean_speed = np.mean(self.speed_history)
                variance = np.var(self.speed_history)

                # Если дисперсия слишком велика, не учитываем это значение
                if variance > self.speed_variance_threshold:
                    speed = 0  # Игнорируем резко изменяющуюся скорость
                    bounding_box = None  # Не обновляем координаты

            return bounding_box, speed

        return None, speed


def main():
    # Выбор источника изображения
    source_type = input("Выберите источник изображения (1 - веб-камера, 2 - видеофайл): ")

    if source_type == '1':
        source = 0  # По умолчанию используем веб-камеру
    elif source_type == '2':
        video_path = input("Введите путь к видеофайлу: ")
        source = video_path
    else:
        print("Ошибка: Неверный выбор источника.")
        return

    # Константы
    PIXELS_PER_METER = 500  # Предположим, что 100 пикселей соответствует 1 метру
    FPS = 30  # Частота кадров (может быть разной в зависимости от камеры/видео)
    EXECUTION_FREQUENCY = 20  # Частота выполнения в герцах

    image_capture = ImageCapture(source)
    motion_detector = MotionDetector(PIXELS_PER_METER, FPS, EXECUTION_FREQUENCY)

    while True:
        start_time = time.time()  # Запоминаем время начала выполнения цикла

        current_gray, frame = image_capture.get_frame()

        if current_gray is None:
            print("Ошибка: Не удалось прочитать кадр.")
            break

        bounding_box, speed = motion_detector.calculate_speed(image_capture.prev_gray, current_gray)

        if bounding_box:
            (x, y, w, h) = bounding_box
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

        # Вывод данных в консоль
        if bounding_box:
            print(f"Координаты: ({bounding_box[0]}, {bounding_box[1]}, {bounding_box[2]}, {bounding_box[3]}), "
                  f"Скорость: {speed:.2f} м/с")
        else:
            print(f"Нет движения, Скорость: {speed:.2f} м/с")

        # Отображение скорости на кадре
        cv2.putText(frame, f'Speed: {speed:.2f} m/s', (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)

        # Отображаем кадр
        cv2.imshow('Frame', frame)

        # Обновляем предыдущий кадр
        image_capture.prev_gray = current_gray

        # Управление временем выполнения
        elapsed_time = time.time() - start_time
        delay_time = max(1 / motion_detector.execution_frequency - elapsed_time, 0)
        time.sleep(delay_time)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    image_capture.release()

if __name__ == "__main__":
    main()
